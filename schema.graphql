"""
Autogenerated return type of AddListOwner
"""
type AddListOwnerPayload {
  errors: [FormError!]!
  success: Boolean!
}

"""
Autogenerated return type of AddTeamMember
"""
type AddTeamMemberPayload {
  companies: [Company!]!
  errors: [FormError!]!
  role: Role!
  success: Boolean!
  teams: [Team!]!
  user: User!
}

type Company {
  autoPdf: Boolean
  autoWatermark: Boolean
  brokers: [Company!]
  id: ID!
  isActive: Boolean
  logoUrl: String
  name: String!
  owner: User!
  parents: [Company!]
  previewOnly: Boolean
  requestedLists: [List!]
  respondedLists: [List!]
  roles: [Role!]!
  subscription: Subscription
  teams: [Team!]!
  totalStorage: Int
  totalUsers: Int
  users: [User!]!
}

"""
CompanyUsers
"""
type CompanyUsers {
  company: Company!
  id: ID!
  users: [User!]
}

"""
Autogenerated return type of CreateAssociatedCompany
"""
type CreateAssociatedCompanyPayload {
  company: Company
  errors: [FormError!]!
  success: Boolean!
}

"""
Autogenerated return type of CreateCompany
"""
type CreateCompanyPayload {
  company: Company
  errors: [FormError!]!
  success: Boolean!
}

"""
Autogenerated return type of CreateList
"""
type CreateListPayload {
  errors: [FormError!]!
  list: List
  success: Boolean!
}

"""
Autogenerated return type of CreateTask
"""
type CreateTaskPayload {
  errors: [FormError!]!
  success: Boolean!
  task: Task
}

"""
Autogenerated return type of CreateTeam
"""
type CreateTeamPayload {
  errors: [FormError!]!
  success: Boolean!
  team: Team
}

"""
CurrentUser
"""
type CurrentUser {
  id: String!
  user: User
}

"""
A user-readable error from a form field
"""
type FormError {
  """
  A description of the error
  """
  message: String!

  """
  Which field this error came from
  """
  path: String
}

"""
Lists
"""
type List {
  description: String
  id: String!
  isActive: Boolean
  isPublicTemplate: Boolean
  isTemplate: Boolean
  name: String
  owners: [User!]
  requesterCompany: Company
  responderCompany: Company
  tasks: [Task!]
}

type Mutation {
  addListOwner(listId: ID!, ownerId: ID, teamId: ID): AddListOwnerPayload
  addTeamMember(companyId: ID!, email: String!, fullName: String!, role: ID!, team: String!): AddTeamMemberPayload
  createAssociatedCompany(companyId: ID!, isBroker: Boolean, isParent: Boolean, newCompanyName: String!, ownerEmail: String!): CreateAssociatedCompanyPayload
  createCompany(name: String!): CreateCompanyPayload
  createList(description: String, isPublicTemplate: Boolean!, isTemplate: Boolean!, name: String!, ownerId: ID!, requesterId: ID!, responderId: ID, tasks: [TaskAttributes!]): CreateListPayload
  createTask(description: String, listId: ID!, name: String!, priority: String!, section: String, status: String!): CreateTaskPayload
  createTeam(companyID: String!, name: String!): CreateTeamPayload
  removeCompanyMember(companyId: ID!, userId: ID, userIds: [ID!]): RemoveCompanyMemberPayload
  removeTeamMember(teamId: ID!, userId: ID, userIds: [ID!]): RemoveTeamMemberPayload
  sendResetPasswordInstructions(email: String!): SendResetPasswordInstructionsPayload
  signInUser(email: String!, password: String!, provider: String!, socialLogin: Boolean!, tokenID: String!, uuID: String!): SignInUserPayload
  signOutUser: SignOutUserPayload
  signUpUser(companyName: String, email: String!, fullName: String!, password: String!, provider: String, socialLogin: Boolean, tokenID: String, uuID: String): SignUpUserPayload
  updateCompanySettings(automaticPdf: Boolean, brokerId: ID, deleteBrokerId: ID, deleteParentId: ID, dynamicWatermarking: Boolean, id: ID!, name: String, parentId: ID, previewOnly: Boolean): UpdateCompanySettingsPayload
  updateTeamMember(companyId: ID!, fullName: String!, id: ID!, role: ID!): UpdateTeamMemberPayload
  updateUserData(displayName: String!, email: String!, fullName: String!, lastViewedCompanyId: ID): UpdateUserDataPayload
  updateUserPassword(oldPassword: String!, password: String!): UpdateUserPasswordPayload
}

type Query {
  """
  Find a company by id
  """
  company(id: ID!): Company!

  """
  Return details of a user
  """
  companyUsers(CompanyId: ID!, TeamId: ID, limit: Int, offset: Int): CompanyUsers!

  """
  The currently logged in user
  """
  currentUser: CurrentUser

  """
  Find a list by id
  """
  list(id: ID!): List!

  """
  Find a team by id
  """
  lists: [List!]!

  """
  Return All available roles
  """
  roles: [Role!]!

  """
  Find companies by user email OR Name
  """
  searchCompanies(companyId: ID!, text: String!): SearchCompanies!

  """
  Search users by company id
  """
  searchCompanyUsers(companyId: ID!, text: String!): SearchCompanyUsers!

  """
  Find a team by id
  """
  tasks: [Task!]!

  """
  Find a team by id
  """
  team(id: ID!): Team!

  """
  All Available lists
  """
  templateLists: [List!]!

  """
  Return details of a user
  """
  user(id: ID!): User!

  """
  Find a user by id
  """
  userDetails(companyId: ID, id: ID!): UserDetails

  """
  Information for resetting a users password
  """
  userForPasswordReset(
    """
    The reset token received from a forgot password email
    """
    token: String!
  ): UserForPasswordReset
}

"""
Autogenerated return type of RemoveCompanyMember
"""
type RemoveCompanyMemberPayload {
  companies: [Company!]
  errors: [FormError!]!
  success: Boolean!
  teams: [Team!]
  user: User
}

"""
Autogenerated return type of RemoveTeamMember
"""
type RemoveTeamMemberPayload {
  companies: [Company!]
  errors: [FormError!]!
  role: Role
  success: Boolean!
  team: Team
  teams: [Team!]
  user: User
}

"""
All Available Roles
"""
type Role {
  id: ID!
  name: String!
}

"""
All Available Roles of User
"""
type RolesUser {
  companyId: ID!
  id: ID!
  name: String!
}

"""
Search companies by company name or user name & email
"""
type SearchCompanies {
  companies: [Company!]
  id: String!
  users: [User!]
}

"""
Search users by company id
"""
type SearchCompanyUsers {
  id: String!
  teams: [Team!]
  users: [User!]
}

"""
Autogenerated return type of SendResetPasswordInstructions
"""
type SendResetPasswordInstructionsPayload {
  errors: [FormError!]!
  success: Boolean!
}

"""
Autogenerated return type of SignInUser
"""
type SignInUserPayload {
  currentUser: CurrentUser
  errors: [FormError!]!
  success: Boolean!
  user: User
}

"""
Autogenerated return type of SignOutUser
"""
type SignOutUserPayload {
  errors: [FormError!]!
  success: Boolean!
}

"""
Autogenerated return type of SignUpUser
"""
type SignUpUserPayload {
  errors: [FormError!]!
  success: Boolean!
  user: User
}

type Subscription {
  additionalStorage: String
  autoPdf: Boolean
  autoWatermark: Boolean
  description: String
  id: ID!
  maxStorage: String
  maxUsers: String
  name: String!
}

"""
Task
"""
type Task {
  description: String
  dueDate: String
  id: String!
  isActive: Boolean
  list: List
  name: String
  priority: String
  section: TaskSection
  status: String
}

"""
Attributes for creating or updating a task
"""
input TaskAttributes {
  description: String!
  dueDate: String!
  isActive: Boolean!
  name: String!
  priority: String!
  section: String!
  status: String!
}

"""
TaskSection
"""
type TaskSection {
  id: ID!
  name: String
  tasks: [Task!]
}

"""
Team
"""
type Team {
  company: Company!
  companyId: ID!
  id: ID!
  name: String!
  users: [User!]!
}

"""
Autogenerated return type of UpdateCompanySettings
"""
type UpdateCompanySettingsPayload {
  brokers: [Company!]
  company: Company!
  errors: [FormError!]!
  parents: [Company!]
  success: Boolean!
}

"""
Autogenerated return type of UpdateTeamMember
"""
type UpdateTeamMemberPayload {
  companies: [Company!]!
  errors: [FormError!]!
  role: Role!
  success: Boolean!
  teams: [Team!]!
  user: User!
}

"""
Autogenerated return type of UpdateUserData
"""
type UpdateUserDataPayload {
  errors: [FormError!]!
  success: Boolean!
  user: User
}

"""
Autogenerated return type of UpdateUserPassword
"""
type UpdateUserPasswordPayload {
  errors: [FormError!]!
  success: Boolean!
  user: User
}

"""
User
"""
type User {
  companies: [Company!]
  displayName: String
  email: String!
  fullName: String!
  id: ID!
  lastViewedCompanyId: ID
  ownedCompanies: [Company!]
  profileUrl: String
  roles: [RolesUser!]
  teams: [Team!]
}

"""
UserDetails
"""
type UserDetails {
  id: String!
  role: Role
  user: User
}

"""
User with limited fields for the password reset screen
"""
type UserForPasswordReset {
  email: String!
  resetPasswordPeriodValid: Boolean
}